第一章 绪论
1）操作系统的概念
1.操作系统的地位：硬件之上，其他软件之下，提供其他软件的支撑环境，计算机资源的管理者。
2.软件包括应用软件和系统软件，而系统软件则包括操作系统和（编译软件，数据库系统等）
3.操作系统是管理和控制系统中各种硬件和软件资源，合理地组织计算机工作流程的系统软件，使用户和计算机之间的接口。
4.操作系统的作用
4.1OS作为计算机系统的资源管理者
管理CPU,储存器，外部I/O设备，信息（数据和软件）
管理资源的当前状态，资源的分配，回收和访问操作，相应的管理策略
4.2OS作为用户与计算机硬件之间的接口
系统命令：命令行，菜单式，命令脚本式，GUI
系统调用：形式上类似于过程调用，在应用编程中使用
4.3OS作为虚拟机，扩展机
操作系统将裸机改造成为功能更强，使用更为方便的机器

2）操作系统的发展历史
1.手工操作阶段
2.单批道处理系统
3.多道批处理系统
4.分时系统
5.实时系统

3）操作系统的分类
1.批处理操作系统：用户脱机使用计算机，作业成批处理，多道程序运行
2.分时操作系统：多路性，独立性，交互性
3.实时操作系统：及时响应，高可靠性。过程控制系统/信息查询系统/事务处理系统
4.个人计算机操作系统：针对但用户使用的个人计算机进行优化的操作系统
5.网络操作系统：提供网络通信和网络服务功能的操作系统：资源共享
6.分布式操作系统：处理和控制的分散，以计算机网络为基础，基本特征是在处理上的分布

4）操作系统的功能
1.存储管理：提高利用率，方便用户使用，提供足够的储存空间，方便进程并发运行
1.1储存分配与回收：为进程分配存储空间
1.2储存保护：防止进程间相互干扰，相互保密
1.3地址映射：进程逻辑地址到内存地址的映射
1.4内存扩充：在不增加物理内存的情况下向用户提供海量存储空间，提高内存利用率，扩大进程的内存空间
2.处理机管理
2.1作业和进程调度：为核心进程分配处理剂，已充分利用处理机资源和提高系统性能，核心为调度算法
2.2进程控制：创建，撤销，阻塞，唤醒进程
2.3进程同步：协调进程间的关系（互斥/同步），使用锁/信号量
2.4进程通讯：进程间的信息交换
3.设备管理
任务：分配和回收设备/驱动设备/响应I/O请求
目的：提高I/O设备利用率 方便使用I/O设备
3.1缓冲管理：解决CPU与I/O速度不匹配，提高利用率
3.2设备回收与分配：根据用户的I/O请求和相应的分配策略，为该用户分配外设以及通道、控制器等
3.3设备处理：控制设备工作 处理中断请求 设备驱动程序 实现CPU与通道和外设之间的通信
3.4设备独立性：指用户程序与物理设备无关
4.文件管理：解决软件资源的存储，共享，保密和保护
4.1文件存储空间管理：分配回收文件空间，解决如何存放信息，提高空间利用率和读写性能
4.2目录关系：解决信息索引问题，实现文件按名存取，共享和保护
4.3文件读写和存取控制：实时对文件的具体访问，防止文件破坏
4.4文件操作的一般管理：实现对文件的创建，删除，打开和关闭等操作
5.用户接口：提供一个友好的用户访问操作西戎的接口，操作系统向上提供两种接口
5.1命令接口（命令界面和图形界面）
5.2程序接口（编程接口）系统调用：供用户程序和系统程序调用操作系统功能

5）操作系统的特征
1.并发：指两个或两个以上的时间或活动在同一时间间隔内发生。并行是指在同一时刻发生
操作系统是一个并发系统，程序的动态实体指的是进程，并发指的是进程
2.共享：操作系统中的多个资源可被多个并发执行的进程所使用。
可分为两种：互斥共享与同时访问
3.虚拟：把物理上的一个实体变为逻辑上的多个对应物，或者多个实体变为逻辑上的一个对应物。
前者是实际存在的后者是虚构假象的
4.异步性：不确定性，指进程的执行顺序和执行时间的不确定性
4.1进程的运行速度不可预知
4.2进程运行发生错误或异常的时刻是随机的
4.3各种各样的软件和硬件中断事件发生的时刻是随机的

6）操作系统的结构
                 1.资源分配与调度
核外各层： 2.文件存取                 ：具有各种资源管理功能并为用户提供各种服务
                 3.I/O处理
                 4.存储管理
系统核：  初级中断处理，外部设备驱动……提供一种进程可以存在和活动的环境
硬件层：  裸机

第二章：操作系统用户界面
1）作业的基本概念
1作业的定义：是要求计算机系统按指定步骤对应用程序进行处理并得到计算结果的加工工作
1.1出到输出，用户要求计算机所做的关于该业务的全部工作
1.2：对应用程序进行处理的步骤
1.3不同的顺序相连的作业步组成
1.4是在一个作业的处理过程中，计算机所做的相对独立的工作
2作业的组成：作业由程序，数据，作业说明书三部分组成
2.1程序和数据：完成用户所要求的业务处理工作，每个作业至少包含一个程序
2.2作业说明书：体现用户的控制意图

2）作业的建立过程
1.1作业的输入：将作业的程序，数据和作业说明书从输入设备，输入到外存
1.2作业控制块的建立：作业控制块是作业说明书在系统中生成的一张表格。
当一个作业的全部程序和数据输入到外存并且在系统中建立了相应的作业控制块之后，一个作业就建立了
2作业控制块JCB
2.1作业控制块与作业之间是一一对应关系
2.2作业输入输出方式：联机/脱机/直接耦合/SPOOLING/网络联机
作业控制方式
2.3脱机作业控制：用户输入作业说明书，整个作业的运行由系统操控
2.4联机作业控制：通过人机会话方式控制作业运行
补充：在批处理系统中，作业是抢占内存的基本单位

3）用户接口
1.1定义：用户接口是操作系统提供用户与计算机打交道的外部机制：
a.用户通过用户接口像计算机提交服务请求
b.计算机通过用户接口向用户提高所需要的服务
1.2计算机系统的三类用户：普通用户，管理员用户和程序员用户
2.操作系统提供的用户接口
2.1命令控制接口：组织工作流程，控制程序的运行
2.2系统功能调用：使用系统功能调用来请求操作系统的服务
3.系统调用：是操作系统提供给软件开发人员的唯一接口
3.1系统调用及系统调用指令
系统调用：用户程序中对OS所提供的一些子功能的调用
系统调用指令（访管指令或陷阱指令）指由于操作系统调用引起处理机中断的指令
3.2系统调用的实现
a.陷阱处理机构：是控制系统调用服务的中断处理机构，以保证系统调用时操作系统程序不被用户程序破坏
b.处理过程：保存现场，恢复现场。处理机的现场一般保护在特定的内存区域或寄存器中
c.参数传递：1.陷阱指令自带参数/2.有关寄存器传递参数/3.开辟堆栈区来传递参数
3.3系统调用及其功能
a.设备管理b.文件管理c.进程控制d.进程通信e.储存管理f.系统管理
3.4系统调用与普通过程调用的异同点
相同点：a.改变指令流程b.重复执行和公用c.改变指令流程后需要返回原处
不同点：
a.系统调用是动态调用，CALL调用是静态调用 ：即系统调用的调用地址和返回地址都是不固定的
b.执行状态不同 
c.进入方式不同 ：利用int或trap指令进行系统调用，利用call或jump指令进入普通的过程调用
d.与进程调度的关系不同  ：采用抢先式调度的系统，在系统调用返回时，要进行重新调度的检查，是否有更高优先级的任务就绪
e.嵌套或递归调用：对系统调用，一般不允许在同一个进程中发生嵌套或递归

第三章 进程管理
1）进程的概念
1程序执行的方式
1.1顺序执行：单批道处理   顺序性/封闭性/可再现性
1.2并发执行：现代操作系统常用，提高资源利用率  逻辑上相互独立但执行时间在客观上相互重叠
并发执行会失去程序的封闭性和可再现性，且程序与计算不再一一对应
a.程序是指令的有序集合，是静态的概念
b.计算是指令序列在处理机上的执行过程，是动态的概念
并发程序在执行期间可以相互制约
1.3并发执行要满足Bernstein条件（针对单CPU）
a.任意两个程序的读集和写集不相交 ：保证两次读之间的数据不变化
b.任意两个程序的写集不相交 ： 保证写的结果不丢失
1.4进程的定义：进程是指一个具有独立功能的程序对某个数据集在处理机上的执行过程和分配资源的基本单位
1.5进程的类型
a.系统进程：资源管理和控制的作用，或执行操作系统核心代码的进程
b.用户进程：执行用户程序的进程
区别：
a.系统进程被分配一个初始的资源集合，这些资源可以为它独占，也能以最高优先权的资格使用，用户进程通过系统服务请求的手段竞争使用系统资源
b.系统进程可以做直接的I/O操作，而用户进程不能直接做I/O操作
c.系统进程在核心态下活动，而用户进程则在用户态下活动
1.6进程与程序的区别
a.进程时动态的，程序是静态的
b.进程具有并发性，而程序没有
c.程序和进程没有一一对应关系
d.各个进程在并发执行过程中会产生相互制约关系
1.7进程和作业的区别
进程：已提交完毕程序的执行过程的描述，是资源分配的基本单位
作业：是用户需要计算机完成某项任务时要求计算机所做工作的集合
a.作业是用户向计算机提交任务的任务实体，进程则是完成用户任务的执行实体
b.一个作业可由多个进程组成，且至少必须由一个进程组成，但反过来不成立
c.作业的概念主要在批处理系统中，在分时系统中没有作业的概念，进程的概念用于所有多道系统
1.8进程的特征
并发性/动态性/调度性/交互性/异步性/结构性

2）进程的组成
1.进程通常由程序，数据集合和进程控制块PCB组成，程序和它操作的数据时进程存在的静态实体，而专门的数据结构PCB用来描述进程当前的状态，本身的特性等。这三部分构成进程在系统中存在和活动的实体，有时也称为进程映像
2.进程控制块PCB
2.1是用来存放进程的管理和控制信息的专门的数据结构，PCB是系统感知进程存在的唯一实体，进程与PCB是一一对应的。
2.2PCB包括：描述信息，控制信息，资源管理信息，CPU现场保护结构
举例：进程标识符name,进程当前状态status,队列指针next…………
3.进程上下文是对进程执行活动的全过程的静态描述，包括PCB结构，与执行该进程有关的各种寄存器的值，正文集等
4.进程空间
4.1任何一个进程都有一个自己的地址空间，该空间称为进程空间或虚空间，
4.2程序的执行都在进程空间内进行，用户程序，进程的各种控制表格都按一定的结构排列在进程空间中
4.3进程空间的大小只与处理机的位数有关，即进程空间的大小=2^n
用户空间：用户程序执行的空间
系统空间：操作系统的内核程序执行的空间

3）进程的状态及其转换
1.进程的基本状态
就绪状态/运行状态/等待状态：准备运行的进程和不具备运行条件的进程就不会混在一起

4）进程控制
进程控制就是使用一些具有特定功能的程序段来创建，撤销进程一句完成进程各状态间的转换。由操作系统中的原语来实现
1.原语
1.1定义：是在系统态下执行的完成系统特定功能的程序段
1.2特点：原语是一个不可分割的基本单位，原语操作具有原子性，即在执行过程中不允许被中断，且不能并发执行
1.3原语是一种特殊的系统调用，起作用是为了实现进程的控制与通信
1.4原语与系统调用比较
a.调用形式：均使用访管指令实现
b.中断性：系统调用在运行中可被中断
c.并发性：原语不允许并发执行
d.使用关系：原语->系统进程或系统服务    系统调用->系统程序->用户应用程序
1.5进程控制
创建原语/撤消原语/阻塞原语/唤醒原语
1.6进程同步控制
P原语/V原语
1.7原语
a.创建原语 create(name, priority, start-addr)
b.撤消原语 kill / exit  三种触发情况：1.已完成正常终止/2.因错误而非正常终止/3.祖先进程要求撤销某个子进程
c.阻塞原语 sleep(chan, pri) / susp(chan) 
d.唤醒原语 wakeup(chan) chan皆为**的原因

5）进程的相互作用
1进程间的制约关系
1.1间接制约：资源共享，独占分配到的部分或全部共享资源，互斥问题
1.2直接制约：进程合作，等待来自其他进程的信息，同步问题
1.3进程互斥
a.临界资源：一次仅允许一个进程使用的资源称为临界资源
b.临界区：每个进程中访问临界资源的那段程序称为临界区，简称CS区
c.互斥的定义：不孕与两个或两个以上的共享临界资源的并发进程同时进入临界区
进入临界区的准则：忙则等待/有限等待/让权等待/空闲让进
互斥加锁：0/1
1.4进程同步：并发进程在一些关键点上需要相互等待与互通消息，这样的相互制约关系称为进程同步

2.信号灯与P,V操作
2.1信号量代表可用资源实体的数量，是一个确定的二元组（s,q)，s是一个具有非负初值的整型变量，q是一个初始状态为空的队列
a.信号量只能通过初始化和两个标准的原语来访问，作为OS核心代码执行，不受进程调度的打断
b.初始化指定一个非负整数值，表示空闲资源总数
c.信号量的物理含义：大于零表示剩余资源，=0表示无资源，<0表示等待的进程数
2.2P(S),V(S)
a.P操作：s--，若结果大于零则进程继续进程，否则挂起
b.V操作：s++，若s<=0则唤醒一个进程

6）信号量的应用：
1.互斥：使诸进程互斥地进入临界区
2.同步：使相互合作的进程协调运行
3.描述进程的执行顺序
4.经典同步问题
4.1：生产之-消费者问题
4.2：读者-写者问题
4.3哲学家进餐问题
4.4理发问题

7）进程间的通信
1.进程间通信的类型：低级通信和高级通信
1.1低级通信：只传送控制信息，一般只传送一个或几个字节的信息，以达到控制进程的执行速度，包括进程互斥和同步所采用的信号量
a.优点：传送速度快
b.缺点：传送信息量小，效率低吗，编程复杂
1.2高级通信《能够传送大批量的疏忽，目的不是为了控制继承的执行成都，而是为了交换信息
2.直接通信和间接通信
2.1直接通信：发送进程发消息时要指定接受进程的名字，反过来，接收时要指明发送进程的名字。信息直接传递给接收方
2.2间接通信：不指定接收进程的名字，借助收发进程之外的共享数据结构作为通信中转，收方与发方的数目是任意的

3.进程间的通信方式
单机系统中可分为：主从式，会话式，消息或信箱机制，共享存储区方法，共享文件方法（管道机制）
3.1主从式
a.主进程可自由地使用从进程的资源或数据
b.从进程的动作收主进程的控制
c.主进程和从进程的关系是固定的
3.2会话方式：双反可称为使用进程和服务进程
a.使用进程在使用服务进程所提供的服务之前，必须得到服务进程的许可
b.服务进程根据使用进程的要求提供服务，但对提供服务的控制由服务进程自身完成
c.使用进程和服务进程在进行通信时有规定连接关系
3.3消息或邮箱机制：无论接收进程是否已准备好接收消息，发送进程都将把所要发送的消息送入缓冲区或邮箱
有四部分组成：发送进程名，接收进程名，数据，有关数据的操作
a.只要存在空缓冲区或邮箱，发送进程就可以发送消息
b.与会话系统不同，发送进程和接收进程之间无直接连接关系
c.发送进程和接收进程之间存在缓冲区或邮箱用来存放被传送消息
3.4共享存储区方式
共享存储区方式与前面三种方式不同，共享存储区方式不要求数据移动。两个需要互相交换信息的进程通过对同一共享数据区的操作来达到互相通信进程的一个组成部分
3.5共享文件方式

消息缓冲机制：
消息缓冲机制中所使用的缓冲区为公用缓冲区，使用消息缓冲机制传送数据时，两通信进程必须满足如下条件:
a.在发送进程把消息写入缓冲区和把缓冲区挂入消息队列时，应禁止其它进程对该缓冲区消息队列的访问。否则，将引起消息队列的混乱。同理，当接收进程正从消息队列中取消息缓冲时，也应禁止其它进程对该队列的访问。
b.当缓冲区中无消息存在时，接收进程不能接收到任何消息
"发送原语:发送一个消息给进程 B,发送进程存放的消息内存区的首址在皿中。send(B,m)
接收原语:接收来自A进程的消息n。Receive(A, n)

4.邮箱通信
邮箱通信就是发送进程申请建立一与接收进程连接的邮箱，发送进程把消息送往邮箱，接受进程从邮箱中去除信息，从而完成进程间信息交换
邮箱由邮箱头和邮箱体组成，邮箱头描述邮箱名称，邮箱大小，邮箱方向以及拥有该邮箱的进程名等，邮箱体主要用来存放消息
进程通信需满足如下条件：
a.发送进程发送消息时，邮箱中至少有一个空格存放该消息
b.接收进程接收消息时，邮箱中至少要有一个消息存在

10）死锁问题
死锁的定义：两个或两个并发进程彼此相互等待对方所有用的资源，且这些并发进程在得到对方的资源之前不会释放自己所拥有的资源，而无法继续向前推进的状态
1.产生死锁的原因
1.1 资源竞争：可剥夺性资源/非剥夺性资源/临时性资源
1.2 进程推进顺序不合理
2.产生死锁的必要条件
2.1互斥条件：进程要求对所分配的资源进行排他性抑制，即在一段时间内某资源仅为一个进程所占用
2.2部分分配：进程每次申请它所需要的一部分资源，在等待新资源的同时，继续占有已分配到的资源
2.3不剥夺条件：进程已获得的资源，在没有使用完之前，不能被剥夺，只能在使用完时由自己释放
2.4环路条件：在发生死锁时，必然存在一种进程-资源的循环链，链中每一个进程以获得的资源同时被下一个进程所请求
3.死锁的排除方法
3.1预防死锁：限制并发进程对资源的请求，从而破坏产生死锁的必要条件
3.2避免死锁：系统在分配资源时，根据资源的使用情况提前做出预测，从而避免发生死锁
3.3检测与解除死锁
4.预防死锁
基本思想：打破产生死锁的四个必要条件的一个或者几个
策略：资源预先分配策略/资源有序分配策略
5.避免死锁——安全状态
现有进程资源占有的情况下，各进程按照某种推进顺序，仍然可以使每个进程得到其对资源的最大需求，从而都可以顺利的完成
进程序列<P1,P2……P3>

银行家算法避免死锁，银行家算法如下：
设请求request是进程Pi的请求向量，请求；request=k表示进程Pi请求分配Ri类资源k个，当Pi发出资源请求后，系统按照下列步骤进行检查.
(1)若请求Request<=Need；，则执行步骤(2)；否则系统会因为它所需要的资源数已超过它要求的最大值而认为出错.
(2)若请求Request<=Available可用，则执行步骤(3)；否则系统会因为系统中尚无足够的资源满足P：的申请而使进程P：等待.
(3)系统试探地把资源分配给进程P；并修改如下数据结构中的值：
可用=可用-请求；
分配=分配+请求
需要=需要-请求；
(4)系统执行安全算法，检查此次资源分配后，系统是否处于安全状态.若是则系统才真正将资源分配给进程P；以完成本次分配；若不是则系统将恢复原状态(即撤销试分配)，让Pi等待

安全性算法
(1)另外设置两个向量:
工作向量Work:m个元素的数组，表示系统可提供给进程继续运行所需的各类资源数目，初值Work =Available。
完成向量Finish:n个元素的数组，记录当前n个并发进程能否进行完，ture表示能，false表示不能，初值为false。
(2)从进程集合中找到一个能满足下述条件的进程:
① Finish(i)=false 目 ② Need,≤Work  若有，转(3);否则，转(4)
(3)当进程P;获得资源后可顺利执行直到完成，然后释放分配给它的资源，并做如下工作:
Work=Work+Allocation;  Finish(i)=true   转(2)
(4)若所有进程的Fimish(i)的值都为true，说明系统处于安全状态;否则系统处于不安全状态。

1.检测死锁：允许思索发生，根据程序员的经验判断是否出现死锁
2.解除死锁：a.撤销进程法 b.资源剥夺法

第四章 处理机调度
处理机调度的核心是对CPU资源进行合理的分配使用
1）分级调度
a.作业调度（宏观调度，高级调度）：为作业分配资源，作业结束后回收资源
b.交换调度（中间调度，内外存交换）：将进程调入/调出外存，提高内存利用率和吞吐量
c.进程调度（微观调度，低级调度）：决定就绪队列中哪个进程应获得处理机
d.线程调度：进程中相关堆栈和控制表等的调度

2）作业状态及其转换：分为提交/后备/执行/完成
1.提交状态：一个作业从输入设备进入外部存储设备的过程时所处的状态
2.后备状态：作业的全部信息都已通过输入设备输入到外存并入井中，等待进入内存
3.执行状态：作业一旦被作业调度程序选择，则为其分配所需的资源，并创建进程，送入内存中投入使用
4.完成状态：作业运行完毕，准备退出系统时的状态（所占用的资源尚未被全部被系统回收）
（外存中有一个就绪等待队列，由交互调度进入内存，而内存中也有一个就绪等待执行队列，由进程调度进行转移）

3）作业与进程的关系
a.作业是用户向计算机提交任务的任务实体
b.进程是计算机为了完成用户任务实体而设置的执行实体
计算机要完成一个任务实体，需要要有一个以上的执行实体，即一个作业是由一个以上的进程组成
系统必须为一个作业创建一个根进程，然后再根据任务要求创建相应的子进程

4）调度性能的衡量
1.周转时间：作业从提交到完成（得到结果）所经历的时间。包括:在收容队列中等待，COU上执行，就绪队列和阻塞队列中等待，结果输出等待等
1.1平均周转时间T
1.2平均带权周转时间W
2.响应时间：用户发出命令到系统响应给出执行结果所经历的时间
3吞吐量：给定时间内所完成的作业总数，跟作业本身特性和调度算法都有关系
4.设备/处理机利用率
5.设备的均衡利用：CPU繁忙的作业和I/O繁忙的作业搭配
6.公平性：避免某些作业的等待时间过长
7.优先级

5）作业调度
1.作业控制块
系统为每个作业设置了一个作业控制块JCB，记录已进入系统各作业情况，以便于管理和调度作业
2.作业调度的功能
2.1作业调度的任务：完成作业从后备状态到执行状态的转变，以及从执行态到完成态的转变
2.2作业调度中的转移过程
a.后备->执行
b.执行->完成
2.3作业调度的具体功能
a.记录系统中各个作业的情况
b.按照某种调度算法从后被作业中选取作业
c.为被选取的作业分配内存，外设等需要的资源
d.为选中的作业建立相应的进程
e.在作业运行完毕后运行过程中因某种原因需要撤离时，进行善后处理工作，回收所占用的全部资源，撤销相关的进程及JCB
3.作业调度的目标和性能衡量
3.1调度目标
a.尽量公平合理 b.尽可能高的设备利用率  c.执行尽可能多的作业  d.尽快的响应时间
3.2调度算法性能的衡量
a.平均周转时间 
b.平均带权周转时间
c.平均响应时间

6）进程调度
1.进程调度的功能
进程调度的任务是控制协调进程对CPU的竞争，即按一定的调度算法从就绪队列中选择一个进程，并把CPU的使用权交给被选中的进程
1.1记录所有进程的执行状态
1.2按一定策略选择一个就绪进程
1.3完成进程上下文切换
a.检查是否可以进行进程切换
b.保存被切换进程的现场
c.选取一个新进程
d.回复被选中进程的现场
2.进程调度的时机
进程调度的时机与引起进程调度的原因及进程调度方式有关。
引起进程调度的原因有(原因之一发生时引发):
a.正在执行的进程运行完毕，或由于某种错误而终止运行
b.执行中的进程自己调用阻塞原语，将自己阻塞起来进入等待状态
c.执行中的进程执行了P原语操作，因资源不足而被阻塞，或执行了V原语操作激活了等待资源的进程队列
d.执行中的进程提出I/0请求后被阻塞
e.执行完系统调用，在系统程序返回用户进程时，可调度选择一新的用户进程执行
f.分时系统中时间片到
g.当有一个优先级更高的进程就绪(可抢占式)
3.进程调度的方式：
3.1非抢占式：某一进程被调度执行后，将一直执行直到完成或发生某时间被阻塞，即是由于自身的原因而让出CPU
3.2抢占式：由于优先权，短作业优先或时间片到等因素，系统强行剥夺正在执行进程的CPU
4.进程调度性能衡量
4.1定性评价：公平性/可靠性/简洁性
4.2定量评价：CPU利用率/响应时间/吞吐量
*进程调度与作业调度
作业调度为进程调度做准备
a.作业调度对除了CPU之外的所有系统资源进行分配
b.进程调度专门负责对CPU进行分配，使进程活动起来
作业调度次数少，进程调度频率高
有的操作系统无作业调度，但进程调度是必不可少的

7）调度算法
1.先来先服务-FCFS —— 既可用于作业调度，也可用于进程调度
基本思想：按照作业提交/进程变为就绪状态的先后次序，调入系统或分派CPU
调度程序每次选择的作业/进程是等待时间最久的，而不管其运行时间的长短
2.短作业优先法-SJF——既可用于作业调度，也可用于进程调度
基本思想：对预计时间短的作业/进程优先处理，通常后来的短作业不抢先正在执行的作业
是FCFS算法的改进，其目标是减少平均周转时间
变种SRT-最短剩余时间优先：允许比当前进程的剩余时间更短的进程来抢占
3.最高相应比优先法-HRN——既可用于作业调度，也可用于进程调度
基本思想：响应比高者优先调度算法是介于这两种算法之间的一种折衷的算法，同时考虑每个作业的等待时间和估计需要的运行时间，从中选出响应比最高的作业运行投入
4.时间片轮转法-RR法 —— 不可用于作业调度，可用于进程调度
基本思想：
a.将系统中所有就绪进程按照FCFS原则排成一个队列
b.每次调度时将CPU分派给队首进程，让其执行一个时间片
c.在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程
d.进程可以未使用一个时间片，就提前调度
5.多级队列算法——既可用于作业调度，也可用于进程调度
根据作业或进程的类型不同，将后备或就绪队列再分为若干个子队列
各队有不同的调度算法
6.优先级算法
对优先级高的作业/进程优先处理，可分为抢先式和非抢先式
6.1静态优先级
根据作业/进程的静态特性，优先级在作业/进程开始执行前就确定，直到终止都不改变。通常是一个整数。
(静态优先级可由用户/系统/操作员确定）
6.2动态优先级
创建时赋予的优先级，在运行过程中可以不断改变，以便获得更好的调度性能。
a.在就绪队列中，等待中央处理器时间愈长，则优先级提高，从而使优先级较低的进程在等待足够的时间后，其优先级提高到可被调度执行
b.进程占有中央处理器时间愈长，或每执行一个时间片则优先级降低，从而一个进程持续执行时，其优先级可降低到出让中央处理器
6.3线性优先级调度算法
基本思想：就绪进程队列分成两个:
a.新创建进程队列:按FCFS方式排队;进程优先级按速率a增加;
b.享受服务进程队列:已得到过时间片服务的进程也按FCFS方式排队;进程优先级按速率b增加;(a>b>0)
新创建进程队列中的队首进程转入享受服务队列的条件:
a.当新创建进程队列中的头一个进程的优先级与享受服务进程队列中最后一个进程的优先级相同时
b.当享受服务队列为空时
7.多级反馈轮转法：是时间片轮转法和优先级法的综合和发展
7.1设置多个就绪队列，分别赋予不同的优先级，如:
a.优先级逐级降低，队列1的优先级最高。
b.每个队列执行时间片的长度也不同，规定优先级越低，则时间片越长，如逐级加借
7.2每个队列按FCFS原则排队
7.3同一队列内优先级相同。
7.4仅当较高优先级的队列为空，才调度较低优先级的队列中的进程执行
7.5新进程进入内存后，先投入队列1的末尾，若按队列1的一个时间片未能执行完，则降低投入的队列2的末尾，如此下去，知道最后一个队列（最低级）
7.6最后一个队列中的进程采用时间片轮转的方式进行调度
优点：
a.不必估计进程的执行时间，动态调节
b.能够较好的满足各种要求，提高系统吞吐量，缩短相应时间和平均周转时间
短进程：能在较高优先级队列上的时间片内完成
长进程：不必担心长期得不到处理
c.系统开销小

第五章 存储管理
存储器是计算机系统的重要资源之一，任何程序和数据及各种控制用的数据结构都必须占用一定的存储空间，因此，存储管理直接影响系统性能。包括内存和外存
1）存储层次结构
CPU -> 寄存器 -> 快速缓存 -> 内存 -> 外存
1.1内存储器（内存，主存）
a.CPU能直接访问的存储器
b.用来存放系统和用户的程序和数据，其特点是存取速度快，存储方式是以新换旧，断电信息丢失
1.2外存储器（外存，辅存）
a.CPU不能直接访问
b.用来存放用户的各种信息，存取速度相对于内存要慢很多，但可以用来长期保存用户信息
1.3内存地址
a.一个存储单元占8位即一个字节，给每个存储单元编号，称为内存地址（物理地址，绝对地址，实地址）
b.内存地址空间：内存地址的集合，是一个一维的线性空间
1.4程序的逻辑结构
a.程序地址：用户编程时所用的地址
b.程序地址空间：用户的程序地址的集合称为程序地址空间，总是从0开始，可以是一维也可以是多维空间
1.5用户程序的主要处理阶段
a.编辑：形成源文件
b.编译：形成目标文件
c.链接：由多个目标文件或程序库生成可执行文件
d.装入：构造PCB，形成进程
e.运行：建立的进程获得CPU执行
1.6逻辑地址，物理地址和地址映射
a.逻辑地址（相对地址，虚地址）：用户的程序经过汇编或编译后形成目标代码，目标代码通常采用相对地址的形式
其首地址为0，其余地址根据首地址编址；不能用逻辑地址在内存中读取信息
b.物理地址（绝对地址，实地址）：内存中存储单元的地址，物理地址可直接寻址
c.地址映射：将用户程序中的逻辑地址转换为运行时由机器直接寻址的物理地址
（将程序装入内存时分配逻辑地址，CPU执行指令时按物理地址，因此需要进行地址转换）

2）存储管理的功能
1.存储分配和回收：按照一定的策略为并发进程分配内存空间，并回收系统或用户释放的空间。
2.地址变换：将程序地址空间中使用的逻辑地址变换成主存中的地址
3.存储共享和保护
4.存储器扩充方式

3）内存分配与回收
1.分配结构：登记内存使用情况
2.放置策略：及选择内存空闲区的策略
3.交换策略：确定把内存中哪些程序程序段和数据调出内存，以便腾出足够的空间
4.调入策略：确定外存中的程序段和数据段什么时间，按什么样的控制方式调入内存
5.回收策略：包括回收的时机，及对所回收的内存空闲区和已存在的内存空闲区的调整
存储分配的方式
a.直接分配：编写或编译程序时，直接使用实际的存储地址
前提：事先知道一个作业在主存中的位置
缺点：存储空间的效率不高，且不便
b.静态分配：程序装入内存时才确定内存中的位置，且在其整个运行期间不在内存中移动，也不能再申请内存空间
前提：程序装入内存时必须分配所要求的全部存储量，且退出前不释放
缺点：在多道程序系统中不能有效地共享存储器资源
c.动态分配：程序在装入内存时才确定它们在内存中的位置，但在其整个运行期间可以再申请内存空间，也可在内存中移动。一个程序已占用地存储区不再需要时，可以归还给系统

4）重定位（地址映射）
可执行文件装入时需要解决可执行文件中地址（包括指令和数据的地址）和内存地址的对应
即建立虚实地址的对应关系，有三种实现方式
a.绝对装入：编程或编译时确定地址的映射关系
b.静态地址重定位：程序执行前，由装入程序负责完成地址映射
c.动态地址重定位：处理机执行程序指令时，由动态地址变换机构自动完成地址映射
1.绝对装入
优点：装入过程简单
缺点：不灵活，不适于多道程序系统
2.静态地址重定位
优点：实现简单，不需要硬件的支持
缺点：一个程序通常需要占用连续的内存空间，程序装入内存后不能移动，不易实现共享
3.动态地址映射
使用重定位寄存器：由操作系统用特权指令来设置，比较灵活
优点：a.程序段进行非连续分配/可部分地，动态地分配内存/有利于程序段的共享

5）内存信息的共享和保护
存储保护：保证不对其他进程地程序和数据段产生干扰和破坏
类型：界限保护/访问方式保护
1.界限保护
1.1每个进程都有自己独立的进程空间，不允许发生地址越界
1.2程序在访问内存单元时，硬件检查是否允许
1.3上下界保护法：下界寄存器存起始地址，上界寄存器存末地址
1.4基址，限长寄存器保护法
区别：
a.寄存器设置不同
b.判别项和判别条件不同，上下界用转换后的物理地址进行判别，后者则是直接用程序的逻辑地址
c.上下界寄存器保护法浪费的CPU时间相对要多些
2.访问方式保护：通过保护键匹配判断存储访问方式是否合法
2.1对于允许多个进程共享的存储区域，每个进程都有自己的访问权限。如果一个进程对共享区域的访问违反了权限规定，则发生操作越权(即读写保护)。
2.2为每一个被保护内存区域指定保护键和若干禁止的访问方式，同时进程指定保护键开关。如果访问时键值不匹配而且是被禁止的访问方式，则产生访问出错中断

6）虚拟存储器
用户程序的大小，可能比内存容量小，也可能比内存容量大，甚至要大得多
1.出发点：进程的执行过程中，其大部分程序和数据不常被访问
2.虚拟存储器：为用户提供一种不受物理存储器结构和熔炼限制的存储技术
现代计算机操作系统都采用了虚拟存储技术，虚拟存储器时存储管理的核心概念
虚拟存储器的物质基础：
a.两级存储结构：内存和外存储器
b.地址变换机构：实现逻辑地址到物理地址的转换
3.虚拟存储器的原理
3.1在程序装入时，不必将其全部读入到内存，而只需将当前需要执行的部分读入到内存，便可让程序开始执行(程序的一部分在内存就可执行)。
3.2在程序执行过程中，如果需执行的指令或访问的数据尚未在内存，则由处理器通知操作系统将相应的程序段或数据调入到内存，然后继续执行程序。
3.3另一方面，将内存中暂时不使用的程序段或数据调出保存在外存上，从而腾出空间存放将要装入的程序及数据。
4.虚拟存储器的特征
4.1虚拟性：从逻辑上扩充内存容量
4.2离散分配：内存空间可非连续分配
4.3部分分配：一个作业可被分成多次调入内存运行
4.4多次对换：允许在作业的运行过程中进行换进换出
5.虚拟存储器容量的限制
5.1地址空间受地址字长的限制：32位则最大为4G
5.2虚拟存储器总容量：不超过物理内存和外存交换区容量之和
5.3外存容量：用户的地址空间小于硬盘中作业的存放空间
6.虚拟存储技术的分类——页式管理，段式管理，段叶式管理

7）内外存数据传输的控制
1.由应用程序控制：覆盖
2.由OS控制：交换整个进程空间，虚拟存储（部分进程空间）请求调入/预调入
3.覆盖
原理：一个程序的几个代码段或数据段，按照时间先后来占用公共的内存空间。
a.将程序的必要部分(常用功能)的代码和数据常驻内存
b.可选部分（不常用功能）在其他模块中实现，平时存放在外存中，在有需要时才装入到内存
c.不存在调用关系的模块不必同时装入到内存，从而可以相互覆盖(即不同时用的模块可共用一个分区)
d.可与分区存储管理配合使用
缺点:
a.用户负担大(要求用户清楚地了解程序的结构，并指定各程序段调入内存的先后次序)
b.程序段的最大长度仍受内存容量限制
c.不能实现虚拟存储器
4.交换
原理：将暂时不能执行的程序送到外存中，从而获得空闲内存空间来装入新程序
a.程序暂时不能执行的可能原因：处于阻塞，优先级低
b.交换单位为整个进程的地址空间
c.常用于多道程序系统或小型分时系统中，与分区存储管理配合使用
4.1换出：暂停内存中进程的执行，将其整个地址空间保存到外存的交换区中。
4.2换入：将外存中由阻塞变为就绪的进程的地址空间读入到内存中，并将该进程送到就绪队列。
5.虚拟存储
请求调入 On demand
请求调入方式是在程序执行时，如果所要访问的程序段或数据段不在内存中，则操作系统自动地从外存将有关的程序段和数据段调入内存。
预调入 On prefetch
预调入方式则是由操作系统预测在不远的将来会访问到的那些程序段和数据段部分，并在它们被访问之前系统选择适当的时机将它们调入内存。

5.2分区存储管理
1）分区
原理：把内存分为大小相等或不等的分区，操作系统占一个分区，其余分区用来存放进程的程序和数据
特点：适用于多道程序系统和分时系统
a.支持多个程序并发执行
b.难以进行内存分区的共享
问题：可能存在内碎片和外碎片
a.内碎片：被占用分区之内难以被利用的空间
b.外碎片：被占用分区之间难以被利用的空闲分区
1.可分为固定分区法和动态分区法
1.1固定分区法：分区个数不变，大小不变，且分区大小可能不同
a.每个分区对应一对界地址寄存器：上下限寄存器
b.采用静态重定位方式，由连接程序完成
优点：简单，要求的硬件少
缺点：存在大的碎片，主存利用率低
1.2动态分区法：位置和大小都不固定，应作业的要求而设置
空闲区表的组织方式有两种：空闲区大小/空闲区首地址
寻找合适的空闲区有三种方法：
a.最先b.最佳c.最坏

5.3页式存储管理
分页存储管理的主要问题：碎片问题，内存利用率不高
1.分页的概念：
1.1逻辑空间分页：将程序分页
1.2内存空间分块：将内存分页
1.3内存分配原则：可以不连续的将程序页分配到内存页
2.逻辑地址：（页号，页内地址）
3.页表：用户程序空间的页面与内存块的对应关系
4.页式地址映射
假定逻辑地址为(a,b)，在页表中找到页号a对应的块号A，则物理地址为A*块大小+b
4.1由逻辑地址求实地址
4.2由逻辑八进制或十六进制和页表求实地址
5.快表：高速联想寄存器的并行查询

请求分页式存储管理
问题：当程序的页数大于当前总空闲区的内存块数，无法装入程序
则可以像动态分区那样，先把部分程序装入内存，当执行时发现需要的命令不在内存中时出发缺页中断，读入内存
1.在页表中加入中断位，表示该页是否在内存；外存始址，指出该页在外存上的地址
引用位：表示最近是否有进程访问过；修改位：表示该页调入内存后是否有修改。
2.调入策略：预调/请调
3.淘汰策略：当内存无空闲块时需要淘汰某一页L置换算法
3.1评价指标：缺页次数和缺页率
3.2常见置换算法：随即淘汰/轮转法和先进先出/最近最久未使用/理想型淘汰算法
a.FIFO的Belady现象
正常情况下内存块数分配阅读，发生缺页的次数会越少，但是可能反常现象
b.LRU算法
基本思想：当需要淘汰某一页时，选择离当前时间最近的一段时间内最久没有使用过的页先淘汰。即当需要淘汰一页时，选择最长时间未使用的页。
基于假设：如果某页被访问，它可能马上还要被访问；如果某页长时间未被访问，它可能最近也不可能被访问
算法的实现：为每页设置一个特定的单元，用于记录上次访问以来所经历的时间t，当需要置换一页时，选择t最大的淘汰
c.LRU的近似算法
最不经常使用页面淘汰算法（LFU）
最近没有使用页面淘汰算法（NUR）
d.理想型淘汰算法（OPT）
基本思想：淘汰的页是以后不再使用的，或者说相当长的时间内不会使用的
该算法无法实现，因为要求预先知道一个进程的访问串
4.储存保护
4.1地址越界保护：[0,all)
4.2存储控制保护：页表中新增加存储控制位(r：可读/w：可写/e：可执行）
5.页式管理的优缺点
5.1优点：
a.有效地解决了碎片问题
b.支持虚存
5.2缺点：
a.要有相应的硬件控制
b.增加了系统开销
c.可能存在抖动现象
d.存在内碎片问题
e.不利于程序和数据的空闲

5.4段式存储管理
1.分段：一个程序往往由几个程序段组成，把程序按内容或过程关系分段，每段有自己的段号，每个段都从0开始编址，采用一段连续的地址空间，各段长度不等。
2.段式管理的程序地址结构
二维虚拟地址空间设计成（段号S，段内相对地址W）
a.每个段定义一组逻辑上完整的程序或数据
b.段号之间无顺序关系
c.段长不固定
3.段表
段号/始址/段/存取方式/状态位/访问位/修改位
4.分段和分页的异同之处
4.1相同点:
在内存中都不是整体连续，且均通过地址映射机构将逻辑地址映射到物理内存。
4.2不同点:
a.页是信息的物理单位。用户不需要把程序分页，完全是系统管理的要求
段是信息的逻辑单位。每一段在逻辑上是相对完整的一组信息。分段更好地满足了用户的需求
b.页的大小是固定的，且在同一系统中大小相等段的大小因段而异，取决于用户编写的程序。
c.分页的作业地址空间是一维的。分段的作业地址空间是二维的。
5.段式管理的实现原理
5.1短时管理的内存分配与释放
a.内存分配与释放在作业或进程的执行过程中动态进行
b.内存分配分两种情况：
1)有足够的空闲区时进行分配
2)空闲区不足则采用淘汰算法
c.内存回收：内存拼接
上述分配，淘汰，回收都可采用前面页式提到的动态分区管理方法
5.2段式管理与地址变换
a.把该进程的段表始址放入段表地址寄存器
b.访问段表地址寄存器，得到该进程的段表始址，从而可开始访问段表
c.由虚地址中的段号S为索引，查找段表
d.若该段在内存，则判断其存取控制方式是否有错和段内位移是是否超过段长，若都正确，则从段表相应表目中查出该段在内存的起始地址，并将其和段内相对地址W相加，从而得到实际内存地址
e.若该段不在内存，则产生缺段中断将CPU控制权交给内存分配程序
段式管理地址变换和页式管理相同，也需要经过两次以上的内存访问
访问段表/页表 -> 访问物理地址
页式快表也可以用于段式管理
5.3段的共享与保护
通过段名访问进行段的共享
通过段表和段长进行越界保护，通过段的存取方式进行存权的控制
6.段式管理的优缺点
6.1优点：
a.提供内外村统一管理的虚拟存储
b.段长可根据需要动态增加
c.便于具有完整逻辑功能的信息段进行共享
d.便于实现动态链接
6.2缺点
a.需要更多的硬件支持，提高了成本开销
b.内存管理上较页式管理要差
c.分段的最大尺寸收到主存可用空间的限制
d.淘汰算法选择不当会产生与页式管理一样的抖动现象

5.5段页式存储管理
1.基本思想
用分段方法来管理和分配虚拟存储器，用分页的方法管理和分配内存
a.一方面，可以保持分段地址空间所带来的优点，允许段的动态扩展，可实现段的动态链接，段的共享，实施段保护措施等
b.另一方面利用页式管理解决主存分区的拼接，辅存的管理以及对分段大小限制等问题
2.等分内存：将内存分页
3.地址空间分段：将用户程序分段，每段有段名
4.段内分页：将每一段都分页，使得分段大小不再受内存可用区的限制，即可以不连续
5.逻辑地址的构成 V = (S,P,d）段号S/段内页号P/页内位移d
6.内存分配：以页块为单位进行分配
7.段表，页表和段表地址寄存器
为每个作业或进程建议一张段表，段表中的段长即为页表的长度，段表中的内存始址即为页表始址。
2.地址变换过程
在段页式存储管理中，每存取一次内存中的指令或数据，至少需要访问3次以上的内存
第1次，访问段表(由段表地址寄存器得段表始址)，得到段所对应的页表的始址
第2次，访问页表得到所要访问的指令或数据的内存物理地址
第3次，真正访问指令或数据的物理单元
3.快表或联想寄存器
3.1在快表中，存放当前最常用的段号S、页号P和对应的内存页面与其它控制用栏目。
-在快表中装有1110左右的段号，页号及页面的段页式管理，可以通过快表找到90%以上的所要访问的内存地址
3.2查询快表和段表的工作是同时进行的，当发现快表匹配时，段表的查找立即停止;如不匹配，查找段表、页表的过程继续。

5.6局部性原理和抖动问题
a.局部性原理：实验发现，几乎所有的程序的执行，在一段时间内，CPU总是集中地访问程序中的某个部分而不是随机地对程序的所有部分具有平均访问概率。
b.抖动：在虚存中，页面在内存与外存之间频繁调度，以至于调度页面所需时间比进程实际运行的时间还多，此时系统效率急剧下降甚至导致系统崩溃，这种现象称为颠簸或抖动。
抖动的原因（缺页率或缺段率过高）
页面淘汰算法不合理/分配给进程的物理页面数太少
c.抖动的策略
段式、页式和段页式虚存实现方法都要求在内存中存放一个不小于最低限度的程序段或数据段，而且它们必须是那些正在被访问，或即将被访问的部分，这就使得内外存之间的数据交换减少到最低限度。

补充知识：二级页表
在大地址空间下，进程对应的块过多，查询的效率很低
1.二级页表的结构：
a.第一级表：称为页目录，为每个表项指向对应的二级表
b.第二级表：为页表
2.逻辑地址的构成：三个部分
页目录号/页号/页内位移
3.页表的储存分配
3.1页表可以离散的储存在内存中，通过一级表找到其存放的物理块号
3.2页表可部分装入：提高内存利用率，通过目录查看状态，请求时调入，分配内存空间原理同一级页式管理技术。

第六章 文件管理
信息（程序/数据）是计算机系统中的重要资源。操作系统的文件系统负责信息的组织，存储和访问
1）文件系统的概念
1.文件：一段程序或数据的集合
计算机系统中，文件被解释为一组赋名的相关字符流的集合，或是相关联记录的集合
文件系统：操作系统中与管理文件有关的软件和数据称为文件系统
文件系统负责为用户建立，撤销，读写，修改，复制文件，还负责完成对文件按名存取和存取控制
2.文件系统的功能
系统的角度：
2.1文件空间管理
2.2逻辑结构
2.3物理结构
2.4信息查找
2.5信息共享与保护
用户的角度：按名存取
3.文件类型
3.1按文件性质和用途分类：系统文件E/用户文件RWE/库文件RE
3.2按文件的保护方式分类：只读R/读写RW/可执行E/不保护
3.3按文件组织和处理方式分类：普通/目录/特殊
3.4按信息流分类：输入/输出
3.5按文件中的数据形式分类：源文件/目标文件/可执行文件
分类的目的：对不同文件进行管理，提高系统效率

2）文件的组织结构
1.从用户观点出发：所看到的文件组织形式称为文件的逻辑结构
从实现观点出发：文件在外存上的存放组织形式称为文件的物理结构
文件的逻辑结构与存储设备的特性无关，但文件的物理结构与之有很大关系
2.文件的逻辑结构与存取方法
2.1字符流式的无结构文件：文件的长度=所含字符数
缺点：查找文件中的基本信息单位较困难
优点：管理简单，操作方便
是当前操作系统中常用的文件逻辑结构
2.2记录式的有结构文件：结构上文件，是记录的集合
a.可以把文件中的记录按各种不同的方式排列，构成不同的逻辑结构
b.每条记录由彼此相关的域构成
c.每个记录有一个键，可按键进行查找
2.3逻辑结构的选择
a.对基本信息单位操作不多的文件较适合与字符流式的无结构方式，如源程序文件，目标代码文件
b.需要对基本信息单位进行修改，追加，查找和记录等操作较多的文件，适合采用记录式有结构文件
如：数据库文件
2.4常见的四种记录式结构文件
a.连续结构：把记录按生成的先后顺序连续排列
特点：适用性强，排序顺序与其内容无关/搜索性能较差
b.多重结构
一个包含n个记录名，m个键的文件构成一个m*n维行列式
搜索效率要优与连续结构，但在搜索某一特定记录时，必须找到对应的键之后再在对应的队列中顺序查找
c.转置结构
把含有相同键的记录指针全部指向该键，即把所有与同一键对应的记录的指针连续地置于目录中该键的位置下
适用于给定键后的记录搜索
d.顺序结构
把文件的键按规定的顺序（如字母顺序）排列起来，适用于按某种顺序来搜索，追加和删除记录
2.5文件的逻辑结构和存取方法
文件的存取方法：指用户读写文件的方法，用户通过对文件的存取来完成对文件的修改，追加和搜索等操作
a.顺序存取方式：按照文件的逻辑地址顺序存取（记录式文件Ri->Ri+1/字符流文件rPtr-> rPtr+该段信息的长度)
b.随机（直接）存取方式：按照记录的编号来存取文件的任一记录或者根据存取命令把读写指针移动欲读写处来读写
1）如果文件是定长记录的，能够根据记录好求出记录的首地址
2）如果是变长，则非常困难
c.按键存取方式：根据关键字或记录名进行存取
1）键的搜索：在用户给定要搜索的关键字之后，确定该关键字在文件中的位置
2）记录的搜索：在查找到键之后，在含有该键的所有记录中查找出所需要的记录
都是找出操作对象的逻辑地址，然后映射到物理地址，再对物理地址上的信息进行操作
2.6搜索算法
线性搜索法/散列法/二分搜索法
2.7文件的物理结构：指文件在外存上的存储结构，依赖于外存的物理存储介质
决定了文件信息在存储设备上的存储位置，一般采用类似分页的方式将存储设备和文件信息划分为大小相等的块，以块作为分配和传送信息的基本单位
常见的文件物理结构
a.顺序结构（连续文件）：把一个逻辑上连续的文件信息依次存放到连续的物理块中
优点：结构简单，存取速度快 缺点：不能动态增长，部分删除后有零头
不适用于存放用户文件，数据库文件等经常被修改的文件
b.串联文件：采用非连续的物理块来存放文件信息，这些非连续的物理块之间没有顺序关系
利用指针将同一文件链接成一个串联队列
特点：文件长度可动态增长/搜索效率低/适用于逻辑上连续的文件，存取方法是顺序存取/不适宜随机存取
c.索引文件：系统为每个文件建议一张索引表，每一栏指出文件信息所在的逻辑块号以及与之对应的物理块号
特点：既可以满足文件动态增长的要求，又可以较为方便和迅速地实现随机存取
使用索引表增加了存储空间的开销，至少二次访问存储器，多级索引访问次数更多
2.8.文件存储设备：常用的存储设备有磁盘，光盘，和磁带等。
存储设备的特性决定了文件的存取设备和方法（顺序存储设备：磁带/直接存取设备：磁盘）
a）磁带：带速高，信息密度大，间隙小，则存取速度高
b）磁盘：寻道：定位至指定磁道/旋转延迟：等待指定扇区旋转到磁头下/数据传输：数据在磁盘与内存之间的传输
2.9.磁盘调度算法
2.9.1磁盘调度：磁盘是可被多个进程共享的设备
公平：一个I/O请求在有限时间内满足
高效：减少设备机械运动所带来的时间浪费
2.9.2磁盘调度算法
a.先来先服务：简单，公平，效率并不高
b.最短寻道时间优先：优先选择距当前磁头最近的访问请求进行服务，主要考虑寻道优先
优点：改善了磁盘平均服务时间/缺点：造成某些访问请求长期等待得不到服务
c.扫描算法（电梯算法），磁头先朝一个方向移动，再向另一个方向移动
3.文件存储空间的管理
所有信息都是以文件形式存放在外存上，外存也称为文件存储器，外存上文件存放的空间也叫做文件存储空间
文件存储空间通常是分成若干个大小相等的物理块，并以块为单位交换信息的。
3.1空闲块表：将所有空闲块记录在一个表中，即空闲块表
a.仅当有少量的空白区时才有较好的效果
b.如果存取空间中有大量的小的空白区，则其目录变得很大，因而效率大为降低
c.比较适用于连续文件
3.2空闲块链表：将所有空闲块链成一个链
a.从链头开始摘取所需要的内存块，然后调整首指针
b.把释放的空闲块逐个插入链尾上
c.易于实现，只需要在内存中用一个单元保留链头指针，但工作效率低
3.3成组链接法：把文件存储设备中的所有空闲块按50（X）块分为一组
a.将所有空闲块分为若干组，组的划分是从后往前的
b.每组的第一块用来存放前一组的总块数和各块块号
c.第一组的块数为49（X-1）且第一组前已无其他组存在（需要一个位置来存0表示结束）
d.最后一组可能不足50块，该组的物理块号与总块数放在文件资源表中
e.对空闲块的分配和释放必须互斥进行
3.4位图法：用一串二进制位反映磁盘空间的分配使用情况，每个物理块对应一位，分配物理块为1，否则为0
a.从内存中划出若干个字节，为每个文件存储设备建立一张位示图。在位示图中，每个文件存储设备的物理块都对应一个比特位。用0和1表示对应物理块是空闲还是被占用。
b.一张位示图需要的存储总理为：磁盘大小（字节数）/8*物理块大小
c.位示图不储存在内存中，搜索位示图耗时太长/若储存在内存中耗费空间较大
盘块的分配
1.顺序扫描位示图，从中找到一个或一组为0的二进制位
2.将找到的二进制位转换为相应的盘块号，b = n*(i-1)+(j-1)，n是每行的位数
3.修改位示图，令map[i,j] = 1
回收是上述操作的反向操作
小结
a.空闲文件目录：适用于连续文件
b.空闲块链接：效率较低，链较长
c.空闲块成组链接：UNIX系统中常用
d.位示图：常用于微型机和小型机
4.文件目录管理
文件目录是文件系统实现按名存取的一个有效方法：系统为每个文件编制一个目录表，包括：文件名，物理地址，存取控制信息
4.1文件的组成：文件体/文件说明
文件体：文件本身的信息
文件说明/文件控制块FCB：存放了为管理文件所需的相关信息，包括文件名，第一个物理块的地址，存取控制和管理信息等。
FCB是操作系统为管理文件而设置的数据结构，是文件存在的标志
文件说明组成目录文件，文件系统利用目录文件完成安明存取和对文件信息的共享和保护
4.2目录文件
把文件说明按一定的逻辑结构存放到物理存储块的一个表目里，该表目称为文件目录
可分为单极目录，二级目录和多级目录
a.单极目录：系统为所有存入系统的文件建立一张表，每一文件都有一个表目，文件名与文件一一对应
优点：简单且能实现按名存取
缺点：不允许重名，当目录项过多，查找速度慢，不便于共享
b.二级目录：每个文件的说明信息被组织成目录文件，且以用户为单位把各自的文件说明划分为不同的组
主文件目录/MFD：存放不同的组名有关存取控制信息，包括用户名，用户子目录所在的物理地址等
用户文件目录/UFD：存放用户文件的说明文件，即该用户所有文件的FCB，包括文件名，文件的物理地址等
c.多级/树形目录结构：产生于UNIX操作系统，目录与文件在一起，目录页做成文件
在多级目录结构中，除了最低一级的物理块装有文件信息外，其它每一级目录存放的都是下一级目录或文件的说明信息
优点：a.层次结构清晰，便于管理和保护
b.解决重名问题
c.查找速度加快
4.3便用共享的文件目录
文件系统的一个重要任务就是为用户提供共享信息的手段，可以节省存储空间且更好的维护数据的一致性
a.绕道法
要求每个用户在当前目录下工作，用户对所有文件的访问都是相对于当前目录进行的。
为了提高文件检索速度，文件系统向用户提供当前目录，当前目录一般存放在内存
b.链接法
为了提高共享其他目录中文件的速度，链接法是在相应目录表之间进行链接，将一个目录中的链接指针直接指向被共享文件所在的目录，仍需要用户指定被共享的文件和被链接的目录
d.基本文件目录表BFD
把文件目录分成两部分
1）基本文件目录BFD：包括文件的结构信息，物理块号，存取控制和管理信息等
由系统赋予唯一的内部标识符来标识
此目录以连续文件的形式存于卷头部，其长度决定卷内允许的最大文件数
2）符号文件目录SFD：由用户给出的文件名和文件的内部标识符组成，用来建立文件名和文件说明标识符的一一对应关系
SFD是指示一个用户或用户下目录，文件与其id值得，BFD则是存放所有这些信息得，可以通过id找用户，也可以找文件
4.4目录管理
目录文件：目录以文件的形式存储在外存上，目录项存放文件说明信息或目录管理说明信息
系统初始启动时：把当前正在使用得那些文件目录复制到内存中
a.避免了存取一个文件时需要多次访问外存完成对各级目录的搜索，减少了O/I次数
b.避免了把所有的目录文件读入内存，节省了内存空间
OS以系统调用的方式提供两种特殊的文件操作：
打开文件：把外存上得目录文件复制到内存
关闭文件：删除文件相关目录的内存副本
系统打开文件的方式:(按BFD和SFD方式排列的多级文件目录)
1）把主目录MFD中与待打开文件(如文件a.c)相关联的表目项(Wang)复制到内存
2）根据(1)所得到的标识符(id=3)，再将此标识符所指明的基本文件目录表BFD的有关表目项复制到内存(包括存取控制信息、结构信息以及下级目录的物理块号等)
3）根据(2)所得到的子目录说明信息搜索SFD，以找到与待打开文件相对应的目录表项。如果找到的表目仍然是子
目录名，则系统将根据其对应的标识符id，继续上述复制过程，直到所找到的表目是待打开的文件名(a.c）
4）根据(3)所搜索到的文件名所对应的标识符(id=5)，把相应的BFD 的表目项复制到内存。
4.5文件存取控制：文件共享/保护/保密，即分配文件的使用权（读，写，执行）
a.存取控制矩阵：以文件为单位，把用户按某种关系划分为若干组，同时规定每组的存取权限，每个文件都有一张存取控制表
b.口令方式：用户在创建文件时，为每一个文件设置一个口令，系统为其在目录中建立表目时，相应地附上这个口令
优点：占用的内存单元以及验证口令时的时间开销都较少
缺点：可靠性差，不能灵活的设置和控制存取权限
c.密码方式：在用户建立源文件并将其存储在设备上时，对文件进行编码加密
在读出文件时对其进行译码破密，文件的加密和解密都需要用户提供一个代码键
优点：保密性强
缺点：编码和解码都需要耗费大量处理器时间
6.6文件的使用：文件系统以系统调用或命令方式为用户提供下列4种服务
a.设置和修改用户对文件的存取权限
b.建立，改变和删除目录
c.文件共享，设置访问路径
d.创建，打开，读写，关闭和撤销文件
1）建立文件：向系统请求执行一个create系统调用
a.合法性检查
b.检查同一目录下有无重名文件
c.检查目录中有无空闲位置
d.填写目录项内容
e.返回
2）删除文件：当一个文件不再使用时，用删除命令可将文件删除，在删除文件时，系统将做如下工作：
a.从目录中找到要删除文件的目录项，使之成为空闲目录项
b.回收该文件所占用的存储空间
c.返回
3）打开文件：任何文件使用前都要先打开，即把FCB送到内存
a.根据文件路径名查目录，找到FCB
b.根据打开方式、共享说明和用户身份检查访问合法性
c.根据文件号查系统打开文件表，看文件是否已被打开
若文件已经被打开，共享计数加1;否则，将外存中的FCB等信息填入系统打开文件表空表项，共享计数置为1。
d.在用户打开文件表中取一空表项，填写打开方式等，并指向系统打开文件表对应表项。
返回文件描述符fd，它是一个非负整数，用于以后读写文件。
4）读文件：把文件中的数据从外存读入内存的用户区。
a.在读一个文件时，须在系统调用中给出文件名和存放读出内容的内存地址
b.系统查找目录，找到指定文件的目录项，从中得到被读文件的外存地址，然后从外存将数据读入内存。
5）写文件：当用户要求对文件添加和修改信息时，可用该命令将信息写入文件。
a.在写一个文件时，须在系统调用中给出文件名和写入信息的内存地址
b.系统查找目录，找到指定文件的目录项，再利用目录中的文件指针将信息写入文件。
5)关闭文件：若文件暂时不用，应将其关闭。
a.关闭文件的功能是撤消内存中有关该文件的目录信息，切断用户与该文件的联系
b.若文件在打开期间作过修改，则应将其写回外存
c.文件关闭之后，若要再次访问该文件，则必须重新打开
7.8文件的层次结构模型
层次结构法：按照系统所提供的功能划分为不同的层次，下层为上次提供服务，上层使用下层的功能
优点：易于设计，易于理解和易于实现/使得系统的管理和维护更加容易

第七章 设备管理
7.1概述
7.1.1设备类型
I/O设备是计算机与外界进行信息交换的装置，可从以下不同角度进行分类
a.按操作特性分类：存储设备/输入输出设备
b.按设备的隶属关系分类：操作设备/用户设备
c.按信息组织方法分类：子块设备/字符设备
d.按资源分配角度分类：独占设备/共享设备/虚拟设备
7.1.2设备管理的任务和功能
1.设备管理的任务
(1)选择和分配IO设备以进行数据传输操作
(2)控制IO设备和内存之间交换数据
(3)为用户提供有好的透明接口
(4)提高并行操作度
2.设备管理的功能
(1)提供和进程管理系统的接口
(2)进行设备分配
(3)实现设备和设备，设备和CPU之间的并行操作
(4)进行缓冲区的分配，释放及相关的管理
7.2数据传输控制方式
外围设备和内存之间常用的数据传输控制方法有四种
(1)程序直接控制方式
由用户进程来直接控制内存/CPU和外围设备之间的信息传送
优点：控制简单，不需要多少硬件支持
缺点：
a.CPU的利用率大大降低：CPU和外围设备只能串行工作
b.不能实现设备之间的并行工作：CPU在一段时间内只能和一台外围设备交换数据信息
c.无法发现和处理由于设备或其他硬件所产生的错误
只适用于那些CPU执行速度较慢，而且外围设备较少的系统
(2)中断控制方式
为了减少程序直接控制方法中CPU等待时间以及提高系统的并行程序，中断方式被用来控制外围设备与CPU之间的数据传输
中断方式要求CPU与设备之间有相应的中断请求线，而且在设备控制器的控制状态寄存器中有相应的中断允许位
优点：
a.CPU的利用率大大提高
b.能支持多道程序和设备的并行操作
缺点：
a.一次数据传送过程中，可能发生较多次的中断
b.可能造成CPU无法响应和数据丢失现象
(3)DMA方式（直接存取方式）
DMA方式挪用CPU的一个工作周期，把数据缓冲区寄存器中的数据直接送到内存地址寄存器所指向的内存区域
DMA控制器可用来代替CPU控制内存和设备之间进行成批的数据交换
DMA方式与中断方式的一个主要区别
a.CPU进行中断处理的次数大大减少
b.排除了因并行操作设备过多时CPU来不及处理或因速度不匹配而造成数据丢失等现象
DMA方式的局限性
a.DMA方式对外围设备的管理和某些操作仍由CPU控制
b.多个DMA控制器的同时使用是不经济的，且会引起内存地址的冲突并使得控制过程进一步复杂化
(4)通道方式
通道是一个独立于CPU的专门负责IO控制的处理机，他有自己的指令系统，通道指令受CPU启动，并在结束时向CPU发送中断信号
引入通道的目的：使CPU从IO事务中解脱出来，同时为了提高CPU与设备，设备与设备之间的并行工作能力
一个完整的通道方式的IO系统包含了IO设备，设备控制器，通道及相关的管理软件
按照信息交换方式不同，一个系统中可设立三种类型的通道：
a.字节多路通道：以字节为单位传送数据，主要用于链接大量的低速设备：终端，打印机
b.数组多路通道：以块为单位传送数据，传送速率高，主要用来链接中速块设备，如磁带机等
c.选择通道：以块为单位成批传送数据，一次只能控制一台设备进行IO操作，但具有传送速度高的特点，被用来链接告诉外部设备：磁盘机
通道控制方式的数据输入处理过程：
（1）当进程要求设备输入数据时，CPU发Start指令指明IO操作，设备号和对应通道
（2）对应通道接收到CPU发来的启动指令Start之后，把存放在内存中的通道指令程序读出，设置对应设备的IO控制器中的控制状态寄存器
（3）设备根据通道指令的要求，把数据送往内存中指定区域
（4）若数据传送结束，IO控制器通过中断请求线发送中断信号请求CPU做中断处理
（5）中断处理结束后CPU返回被中断进程处继续执行
通道控制方式与DMA方式的比较
相似处：以内存为中心，实现设备和内存的直接数据交换
不同处：
a.DMA方式中，数据的传输由CPU控制，通道方式中，由专管输入输出的硬件——通道来进行控制
b.DMA方式中，每台设备至少一个DMA控制器，通道方式中，一个通道可控制多台设备与内存的数据交换

四种中断方式的优缺点以及应用场景：
程序直接控制方式：
优点：控制过程简单且对硬件要求较低
缺点：CPU的利用率比较低，只能和外围设备进行串行工作；无法发现和处理由于外部设备或其他硬件所产生的错误
场合：适用于那些CPU执行速度较慢，而且外围设备较少的系统
中断控制方式：
优点：相对于程序直接控制方式提高了CPU的利用率，并且能支持多道程序和设备的并行操作
缺点：在一次传输过程中可能发生较多次终端，因此也可能导致CPU无法响应或数据丢失的现象
场合：中断控制方式适用于对时间要求不高、需要响应外部事件的场景
DMA方式：
优点：CPU中断的次数减少，且排除了因并行操作设备过多导致CPU来不及处理或数据丢失的现象
缺点：DMA控制器的大量使用造成经济负担且会引起内存地址冲突
场合：适用于数据传输量较大，需要高效数据传输的场景
通道方式：
优点：通道方式进一步减轻了CPU的负担，且增加了设备的并行性
缺点：对硬件的要求较高且设计比较复杂，多通道访问时可能造成资源冲突
场合：适用于需要同时进行多个并行数据传输的场景

7.3中断技术
7.3.1中断的基本概念
a.中断:指计算机在执行期间，系统内发生非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来中断处继续执行或调度新的程序执行的过程。
b.中断源:引起中断发生的事件被称为中断源。
c.中断请求:中断源向CPU发出的请求中断处理信号
d.中断响应:CPU收到中断请求后转相应的事件处理程序
e.禁止中断(关中断):CPU内部的处理机状态字PSW的中断允许位已被清除，不允许CPU响应中断。
f.开中断:PSW的中断允许位的设置
g.中断屏蔽:在中断请求产生之后，系统用软件方式有选择地封锁部分中断而允许其余部分的中断仍能得到响应。(中断屏蔽是通过每一类中断源设置一个中断屏蔽触发器来屏蔽它们的中断请求而实现的。)
7.3.2中断的分类和优先级
根据中断源产生的条件，中断可分为:
外中断:指来自处理机和内存外部的中断，包括0中断、外部信号中断、时钟中断、调试中断等。外中断在狭义上般被称为中断。
内中断:指在处理机和内存内部产生的中断，一般称为陷阱(trap)或异常。包括程序运算引起的各种错误，如地址非法、校验错、页面失效、存取访问控制错、算术操作溢出、数据格式非法、除数为零、非法指令、用户程序执行特权指令、分时系统中的时间片中断以及从用户态到核心态的切换等。
中断和陷阱的主要区别
(1)陷阱通常由处理机正在执行的现行指令引起，而中断则是由与现行指令无关的中断源引起的。
(2)陷阱处理程序提供的服务为当前进程所用，而中断处理程序提供的服务则不是为了当前进程的。
(3)CPU在执行完一条指令之后，下一条指令开始之前响应中断，而在一条指令执行中也可以响应陷阱
(4)有的系统中，陷进处理程序被规定在各自的进程上下文中执行，而中断处理程序则在系统上下文中执行
7.3.3软中断
硬中断:中断和陷阱要通过硬件产生相应的中断请求
软中断:通信进程之间用来模拟硬中断的一种信号通信方式。
软中断与硬中断的比较:
相同点:中断源发中断请求/软中断信号后，CPU/接收进程在适当的时机自动进行中断处理/完成软中断信号所对应的功能。
不同点:接收软中断信号的进程不一定正好在接收时占有处理机，相应的处理必须等到该接收进程得到处理机之后才能进行
7.4缓冲技术
7.4.1缓冲技术的引入
目的：
a.缓和CPU和IO设备间速度不匹配的矛盾
b.减少对CPU的中断次数
c.解决DMA或通道方式时的瓶颈问题
7.4.2缓冲的种类
a.按照缓冲器的个数分为：单缓冲，双缓冲，多缓冲，缓冲池
b.根据IO控制方式，缓冲实现方法分为两种
采用专用硬件缓冲器，例如IO控制器中的数据缓冲寄存器
在内存划出一个专用缓冲区，以便存放输入输出的数据，内存缓冲器又称软件缓冲
1.单缓冲：在CPU和外设之间只设立一个缓冲区，输入与输出操作全经该缓冲区来完成，缓冲区是可共享的临界资源，必须互斥使用
2.双缓冲：为输入或输出设置两个缓冲区，使用很少
3.多缓冲：是把主存中的多个缓冲区组织成两部分，一部分用于做输入缓冲区，另一部分作为输出缓冲区。
缓冲池则是将多个缓冲区链接成一个完整的区域，即可用于输入又可用于输出
多缓冲及缓冲池也是可共享的临界资源，必须互斥地使用，由系统统一分配和管理
7.4.3缓冲池的管理
1.系统把各缓冲区按其使用情况连成三种队列
（1）空白缓冲队列em，队首指针为F（em）,队尾指针为L（em)
（2）(2)装满输入数据的输入缓冲队列in，队首指针为F(in)，，队尾指针为L(in)
（3）装满输出数据的输出缓冲队列out,队首指针为F(out)，队尾指针为L(out)
缓冲池有四种工作缓冲区:
(1)用于收容输入数据的工作缓冲区(hin):输入设备-->缓冲区
(2)用于提取输入数据的工作缓冲区(sin):缓冲区-->CPU
(3)用于收容输出数据的工作缓冲区(hout):CPU-->缓冲区
(4)用于提取输出数据的工作缓冲区(sout):缓冲区-->输出设备
2.缓冲池的工作方式
缓冲区在收容输入，提取输入，收容输出和提取输出四种方式下工作
缓冲池的工作原理
a.系统开始启动时，所有缓冲区全部排入em队列中，
b.当有输入任务时，收容输入进程执行读操作时，自动从em队列的队首取下一空闲缓冲区，将输入数据装入，待满后排入in队列(装满输入数据)尾部。并对em队列和in队列长度作减加一操作。
c.当有输出任务时，收容输出进程从em队列中取下一空闲缓冲区，将输出数据装入，满后排入out队列(装满输出数据)尾部。并对em队列和out队列长度作减一、加一操作。
d.当系统要从输入缓冲区为用户进程取数时，由提取输入进程从in队列中取出一缓冲区，将其中的数据复制到用户指定的区域。并将该缓冲区排入em队列的尾部。同时，in队列数减一，em队列数加一。
e.当系统要从输出缓冲区输出数时，由提取输出进程从out队列中取出一缓冲区，将其中的数据送给输出设备进行操作。然后将该缓冲区排入em队列的尾部。同时，out队列数减一，em队列数加一。
7.5设备分配技术
7.5.1设备分配中的数据结构
多道环境下的设备分配，不只是对设备进行分配，而且还要实现与设备相关联的通道及设备控制器的分配
设备的分配和管理中，常采用的数据结构主要有四张表
1）系统设备表SDT
SDT表记录系统中所有1/0设备的信息(接入系统中的每个外设在SDT表中都占有一个表目项)。SDT表在整个系统中只有一张，全面反映了系统中的外设资源的类型、数量、占用情况等。
2）设备控制表DCT
系统中的每台设备都有一张设备控制表DCT。DCT表包含设备的各方面特征，以及与该设备相连的设备控制器的入口位置。
3）控制器控制表COCT
每个控制器都有一张控制器控制表COCT，用于登录某控制器的使用分配情况及与该控制器相连的通道
的情况。具体内容有:
a.控制器号:控制器的内部标识符
b.控制器状态:控制器忙/闲
c.通道指针:指向与该控制器相联的通道控制表CHCT。当控制器与若干通道连接时该项内含多个指针
d.等待队列指针:指向等待该控制器的1/0进程队列
4）通道控制表CHCT
CHCT表反映了通道的情况，系统中的每个通道都有一张CHCT表(只在有通道控制方式的系统中存在)。其内容如下:
a.通道号:通道内部标识符
b.通道状态:通道忙/闲
c.等待队列指针:等待该通道的1/0进程队列的指针
根据用户请求的1/0设备的逻辑名，查找逻辑设备和物理设备的映射表;以物理设备为索引，查找SDT，找到该设备所连接的DCT;继续查找与该设备连接的COCT和CHCT。
一个进程只有获得了通道、控制器和所需设备三者之后，才具备了进行1/0操作的物理条件。
7.5.2设备分配方式：静态分配与动态分配
静态分配：
用户在作业执行之前，由系统一次性分配给该作业所要求的全部设备，控制器和通道
一旦分配之后，这些设备，控制器和通道就一直为该作业所占用，直到该作业撤销
优点：不会出现死锁/缺点：设备的利用率低
静态分配方式主要适用于独占型设备的分配，由于这类设备在使用上必须是互斥地占用。这种方式主要用于分配设备，而对通道和设备控制器的分配不能采用此方式。
动态分配：
当进程需要设备时，通过系统调用命令向系统提出设备请求，由系统按照事先规定的策略给进程分配所需要的设备，控制器和通道，一旦用完之后，立即释放。
优点：提高了设备的利用率/缺点：分配算法不当，会引起进程死锁
动态分配适用对共享设备的分配
7.5.3设备独立性（设备无关性）
为便于外设的管理，系统对每台进入系统中的设备都给定一个对应的编号，作为调用时识别和区分设备用。这种编号无任何重复，被称为设备的绝对号(或物理设备名)。
为方便用户，也为提高外设利用率，系统允许用户申请外设时，只需要向系统说明所需用的某类设备(至于真正在实际中使用哪台设备，由系统根据这类设备的使用情况作出分配)。即使用户需要多台同样的设备，系统也允许用户按自己的使用要求提出编号，这种由用户申请设备时所用的编号称为设备的相对号(或逻辑设备名):
有了设备的绝对号和相对号，用户编程时只考虑逻辑设备，系统调用的是物理设备，逻辑设备与物理设备间的转化由设备分配程序来完成。
设备独立性:指应用程序独立于具体使用的物理设备，即用户编制程序使用的设备与实际使用的设备无关。
优点:使系统的适应性好，可扩展性强，可提高资源利用率。
7.5.4设备分配策略
系统中，进程的数量一般都会超出所拥有的外设资源数量，所以有些进程在1/0请求完成后，不能立即分到所要的外设，这些进程被排入该设备的等待队列。对于等待队列中的进程，系统按照一定的策略对设备进行分配
常见的设备分配方法有两种。
1.先请求先分配
由于进程对设备的申请有先后次序，故排入等待队列的次序也是不相同的。
当该设备被释放归还给系统后，就可以重新分配。此时，系统按进程在等待队列中排队的先后次序，将设备分配给最早排入队列的那个进程
2.优先级高者先分配
在此分配对策中，进程的优先级起了决定作用。分配程序按进程所具有的优先级进行分配:高优先级的进程先分配，同优先级的，先申请先分配。
7.5.5设备分配步骤
1.分配设备
2.分配控制器
3.分配通道
7.5.6虚拟设备与假脱机技术
1.虚拟设备
虚拟设备不是真正意义上的物理设备，它是指代替独享设备的那部分存储空间及有关的控制结构。
对虚拟设备采用的是虚拟分配，其过程是:当进程请求独享设备时，系统将共享设备的一部分存储空间分配给它。进程与设备交换信息时，系统把要交换的信息存放在这部分存储空间，在适当的时候对信息作相应的处理。
2.SPOOLING系统
SP00LING也称同时联机的外围操作或是假脱机操作
思想:利用一台高速共享设备(磁盘或磁鼓)将一台独占设备模拟成多台可并行操作的虚拟设备。这样来，使每个用户都感到得到了系统中的一台独享设备。
(1)SPO0LING系统的组成:
一个完整的SPOOLING 系统中有硬件部
分和软件部分，它们之间协调配合，共同实现了假脱机技术。
硬件部分:
这部分包含了在外存上设立的两区域:输入井和输出井，以及在内存中开辟出的两个缓冲区:输入缓冲区和输出缓冲区
软件部分:包含
预输入进程:将用户要求的输入到设备上的输入数据，经通道和输入缓冲区送入输入井(输入设备一输入井)
缓输出进程:将用户的输出结果在设备空闲时从输出井中，经输出缓冲区送上输出设备(输出井一输出设备)
输入井管理进程:将输入井中的数读入内存(CPU输入井→内存)
输出井管理进程:将内存中的结果送输出井中(CPU内存→输出井)
3.假脱机系统的特点
(1)提高了I/0速度。从对低速I/O设备进行的I/O操作变为对输入井或输出井的操作，缓和了CPU与低速I/O设备速度不匹配的矛盾。
(2)设备并没有分配给任何进程。在输入井或输出井中，分配给进程的是一存储区和建立一张I/O请求表
(3)实现了虚拟设备功能。多个进程同时使用一独享设备，而对每一进程而言，都认为自己独占这一设备，不过，该设备是逻辑上的设备。
7.6IO进程控制
1.IO控制
指从用户进程的IO请求开始，给用户进程分配设备，启动有关设备进行IO操作，以及在IO操作完成之后响应中断，进行善后处理为止的整个系统控制过程
2.IO控制的功能
I/0请求处理模块:把用户进程的IO请求变换为设备管理程序所能接受的信息(例如将I/O请求中的逻辑设备
名转换为对应的物理设备名)，并将I/0请求命令插入指向相应DCT的IO请求队列
设备分配程序:为IO请求分配相应的设备、控制器和通道
缓冲区管理模块:为I/O传送申请必要的缓冲区，以保证IO传送的顺利完成。
另外，在数据传送结束后，外设发出中断请求，I/O控制过程将根据中断原因调用中断处理程序，并做出中断响应。
3.IO控制的实现方式
a.作为请求IO操作的进程的一部分实现
b.作为当前进程的一部分实现
让请求IO操作的进程调用IO操作控制部分，而让当前进程负责调用中断处理部分
c.IO控制由专门的系统进程——IO进程完成。在用户进程发出I/O请求命令之后，或者在外设发出中断请求之后，系统调度I/O进程执行控制I/O操作或者响应中断。
I/O进程也可分为三种方式实现。即:
a.每类(个)设备设一专门的IO进程，且该进程只能在系统态下执行。
b.整个系统设一I/O进程，全面负责系统的数据传送工作。
c.每类(个)设备设一个专门的I/O进程，但该进程既可在用户态也可在系统态下执行。
7.7设备驱动管理
设备驱动程序是驱动物理设备和DMA控制器或IO控制器等直接进行I/O操作的子程序的集合
设备驱动程序负责设置相应设备有关寄存器的值:启动设备进行I/O操作，指定操作的类型和数据流向等
系统设置有设备开关表DST(Device switch Table)
对驱动程序进行管理
a.设备开关表中给出相应设备的各种操作子程序的入口地址，例如打开/关闭、读/写设备子程序的入口地址
b.一般设备开关表是二维结构，其中的行和列分别表示设备类型和驱动程序类型。
c.设备开关表也是I/O进程的一个数据结构。IO控制过程为进程分配设备和缓冲区之后，可以使用设备开关表调用所需的驱动程序进行IO操作。




